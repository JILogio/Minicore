{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Encriptar y Desencriptar Datos\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.text = $event),\n    placeholder: \"Introduce texto para encriptar\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.text]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.encryptText && $options.encryptText(...args))\n  }, \"Encriptar\"), _createElementVNode(\"p\", null, \"Encriptado: \" + _toDisplayString($data.encryptedText), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.decryptText && $options.decryptText(...args))\n  }, \"Desencriptar\"), _createElementVNode(\"p\", null, \"Desencriptado: \" + _toDisplayString($data.decryptedText), 1 /* TEXT */)]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","$data","text","$event","placeholder","onClick","_cache","args","$options","encryptText","_toDisplayString","encryptedText","decryptText","decryptedText"],"sources":["C:\\VsCode\\Minicore\\web-project\\src\\EncriptionPage.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h1>Encriptar y Desencriptar Datos</h1>\r\n      <input v-model=\"text\" placeholder=\"Introduce texto para encriptar\">\r\n      <button @click=\"encryptText\">Encriptar</button>\r\n      <p>Encriptado: {{ encryptedText }}</p>\r\n      <button @click=\"decryptText\">Desencriptar</button>\r\n      <p>Desencriptado: {{ decryptedText }}</p>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from 'axios';\r\n  import Global from './Global'\r\n  \r\n  export default {\r\n    data() {\r\n      return {\r\n        text: '',\r\n        encryptedText: '',\r\n        decryptedText: '',\r\n      };\r\n    },\r\n    methods: {\r\n      async encryptText() {\r\n        const url = Global.url;\r\n        try {\r\n          const response = await axios.post(url+'encrypt', { text: this.text });\r\n          this.encryptedText = response.data.ciphertext;\r\n        } catch (error) {\r\n          console.error('Error encriptando texto:', error);\r\n        }\r\n      },\r\n      async decryptText() {\r\n        const url = Global.url;\r\n        try {\r\n          const response = await axios.post(url+'decrypt', { ciphertext: this.encryptedText });\r\n          this.decryptedText = response.data.plaintext;\r\n        } catch (error) {\r\n          console.error('Error desencriptando texto:', error);\r\n        }\r\n      },\r\n    },\r\n  };\r\n</script>\r\n  "],"mappings":";gCAEMA,mBAAA,CAAuC,YAAnC,gCAA8B;;;uBADpCC,mBAAA,CAOM,cANJC,UAAuC,E,gBACvCF,mBAAA,CAAmE;+DAAnDG,KAAA,CAAAC,IAAI,GAAAC,MAAA;IAAEC,WAAW,EAAC;iDAAlBH,KAAA,CAAAC,IAAI,E,GACpBJ,mBAAA,CAA+C;IAAtCO,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;KAAE,WAAS,GACtCT,mBAAA,CAAsC,WAAnC,cAAY,GAAAY,gBAAA,CAAGT,KAAA,CAAAU,aAAa,kBAC/Bb,mBAAA,CAAkD;IAAzCO,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAI,WAAA,IAAAJ,QAAA,CAAAI,WAAA,IAAAL,IAAA,CAAW;KAAE,cAAY,GACzCT,mBAAA,CAAyC,WAAtC,iBAAe,GAAAY,gBAAA,CAAGT,KAAA,CAAAY,aAAa,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}