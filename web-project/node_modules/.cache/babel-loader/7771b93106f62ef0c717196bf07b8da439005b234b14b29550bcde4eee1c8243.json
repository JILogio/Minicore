{"ast":null,"code":"import { millisecondsInDay } from \"./constants.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\r\n * @name getOverlappingDaysInIntervals\r\n * @category Interval Helpers\r\n * @summary Get the number of days that overlap in two time intervals\r\n *\r\n * @description\r\n * Get the number of days that overlap in two time intervals\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param intervalLeft - The first interval to compare.\r\n * @param intervalRight - The second interval to compare.\r\n *\r\n * @returns The number of days that overlap in two time intervals\r\n *\r\n * @example\r\n * // For overlapping time intervals adds 1 for each started overlapping day:\r\n * getOverlappingDaysInIntervals(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\r\n * )\r\n * //=> 3\r\n *\r\n * @example\r\n * // For non-overlapping time intervals returns 0:\r\n * getOverlappingDaysInIntervals(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\r\n * )\r\n * //=> 0\r\n */\n\nexport function getOverlappingDaysInIntervals(intervalLeft, intervalRight) {\n  const [leftStartTime, leftEndTime] = [+toDate(intervalLeft.start), +toDate(intervalLeft.end)].sort((a, b) => a - b);\n  const [rightStartTime, rightEndTime] = [+toDate(intervalRight.start), +toDate(intervalRight.end)].sort((a, b) => a - b);\n  const isOverlapping = leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n  if (!isOverlapping) {\n    return 0;\n  }\n  const overlapStartDate = rightStartTime < leftStartTime ? leftStartTime : rightStartTime;\n  const overlapEndDate = rightEndTime > leftEndTime ? leftEndTime : rightEndTime;\n  const differenceInMs = overlapEndDate - overlapStartDate;\n  return Math.ceil(differenceInMs / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default getOverlappingDaysInIntervals;","map":{"version":3,"names":["millisecondsInDay","toDate","getOverlappingDaysInIntervals","intervalLeft","intervalRight","leftStartTime","leftEndTime","start","end","sort","a","b","rightStartTime","rightEndTime","isOverlapping","overlapStartDate","overlapEndDate","differenceInMs","Math","ceil"],"sources":["C:/VsCode/Minicore/web-project/node_modules/date-fns/getOverlappingDaysInIntervals.mjs"],"sourcesContent":["import { millisecondsInDay } from \"./constants.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * @name getOverlappingDaysInIntervals\r\n * @category Interval Helpers\r\n * @summary Get the number of days that overlap in two time intervals\r\n *\r\n * @description\r\n * Get the number of days that overlap in two time intervals\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param intervalLeft - The first interval to compare.\r\n * @param intervalRight - The second interval to compare.\r\n *\r\n * @returns The number of days that overlap in two time intervals\r\n *\r\n * @example\r\n * // For overlapping time intervals adds 1 for each started overlapping day:\r\n * getOverlappingDaysInIntervals(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\r\n * )\r\n * //=> 3\r\n *\r\n * @example\r\n * // For non-overlapping time intervals returns 0:\r\n * getOverlappingDaysInIntervals(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\r\n * )\r\n * //=> 0\r\n */\r\n\r\nexport function getOverlappingDaysInIntervals(intervalLeft, intervalRight) {\r\n  const [leftStartTime, leftEndTime] = [\r\n    +toDate(intervalLeft.start),\r\n    +toDate(intervalLeft.end),\r\n  ].sort((a, b) => a - b);\r\n  const [rightStartTime, rightEndTime] = [\r\n    +toDate(intervalRight.start),\r\n    +toDate(intervalRight.end),\r\n  ].sort((a, b) => a - b);\r\n\r\n  const isOverlapping =\r\n    leftStartTime < rightEndTime && rightStartTime < leftEndTime;\r\n\r\n  if (!isOverlapping) {\r\n    return 0;\r\n  }\r\n\r\n  const overlapStartDate =\r\n    rightStartTime < leftStartTime ? leftStartTime : rightStartTime;\r\n\r\n  const overlapEndDate =\r\n    rightEndTime > leftEndTime ? leftEndTime : rightEndTime;\r\n\r\n  const differenceInMs = overlapEndDate - overlapStartDate;\r\n\r\n  return Math.ceil(differenceInMs / millisecondsInDay);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default getOverlappingDaysInIntervals;\r\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,iBAAiB;AACnD,SAASC,MAAM,QAAQ,cAAc;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,6BAA6BA,CAACC,YAAY,EAAEC,aAAa,EAAE;EACzE,MAAM,CAACC,aAAa,EAAEC,WAAW,CAAC,GAAG,CACnC,CAACL,MAAM,CAACE,YAAY,CAACI,KAAK,CAAC,EAC3B,CAACN,MAAM,CAACE,YAAY,CAACK,GAAG,CAAC,CAC1B,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EACvB,MAAM,CAACC,cAAc,EAAEC,YAAY,CAAC,GAAG,CACrC,CAACZ,MAAM,CAACG,aAAa,CAACG,KAAK,CAAC,EAC5B,CAACN,MAAM,CAACG,aAAa,CAACI,GAAG,CAAC,CAC3B,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EAEvB,MAAMG,aAAa,GACjBT,aAAa,GAAGQ,YAAY,IAAID,cAAc,GAAGN,WAAW;EAE9D,IAAI,CAACQ,aAAa,EAAE;IAClB,OAAO,CAAC;EACV;EAEA,MAAMC,gBAAgB,GACpBH,cAAc,GAAGP,aAAa,GAAGA,aAAa,GAAGO,cAAc;EAEjE,MAAMI,cAAc,GAClBH,YAAY,GAAGP,WAAW,GAAGA,WAAW,GAAGO,YAAY;EAEzD,MAAMI,cAAc,GAAGD,cAAc,GAAGD,gBAAgB;EAExD,OAAOG,IAAI,CAACC,IAAI,CAACF,cAAc,GAAGjB,iBAAiB,CAAC;AACtD;;AAEA;AACA,eAAeE,6BAA6B"},"metadata":{},"sourceType":"module","externalDependencies":[]}